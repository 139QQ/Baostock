import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';
import 'package:jisu_fund_analyzer/src/features/portfolio/presentation/cubit/fund_favorite_cubit.dart';
import 'package:jisu_fund_analyzer/src/features/portfolio/domain/fund_favorite/src/entities/fund_favorite.dart';
import 'package:jisu_fund_analyzer/src/features/portfolio/domain/entities/portfolio_holding.dart';
import 'package:jisu_fund_analyzer/src/features/portfolio/presentation/pages/portfolio_analysis_page.dart';
import 'package:jisu_fund_analyzer/src/services/fund_data_cache_service.dart';
import 'package:jisu_fund_analyzer/src/services/optimized_fund_search_service.dart';
import 'package:jisu_fund_analyzer/src/services/intelligent_cache_manager.dart';
import 'package:jisu_fund_analyzer/src/models/fund_info.dart' as models;

/// 自选基金页面
///
/// 用于展示和管理用户自选基金列表的页面，提供以下功能：
/// - 展示自选基金列表
/// - 添加/删除自选基金
/// - 实时更新基金数据
/// - 自选基金分组管理
/// - 排序和筛选功能
class WatchlistPage extends StatefulWidget {
  /// 构造函数
  const WatchlistPage({super.key});

  @override
  State<WatchlistPage> createState() => _WatchlistPageState();
}

class _WatchlistPageState extends State<WatchlistPage> {
  final TextEditingController _searchController = TextEditingController();
  FundFavoriteSortType _currentSortType = FundFavoriteSortType.addTime;
  FundFavoriteSortDirection _currentSortDirection = FundFavoriteSortDirection.descending;

  // 智能搜索相关状态 - 使用高性能服务
  bool _isSearching = false;
  List<models.FundInfo> _searchSuggestions = [];
  List<String> _searchHistory = [];
  List<String> _popularSearches = [];
  List<models.FundInfo> _searchResults = [];
  Timer? _searchDebounce;
  final FocusNode _searchFocusNode = FocusNode();
  final OptimizedFundSearchService _fundService = OptimizedFundSearchService();
  final IntelligentCacheManager _cacheManager = IntelligentCacheManager();

  @override
  void initState() {
    super.initState();
    _initializeSmartSearch();
    // 延迟初始化自选基金，避免与Hive初始化冲突
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      if (mounted) {
        try {
          final cubit = context.read<FundFavoriteCubit>();
          await cubit.initialize();
        } catch (e) {
          print('自选基金初始化失败: $e');
        }
      }
    });
  }

  @override
  void dispose() {
    _searchController.dispose();
    _searchFocusNode.dispose();
    _searchDebounce?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: _buildAppBar(),
      body: Column(
        children: [
          _buildSearchAndFilterSection(),
          _buildContentSection(),
        ],
      ),
      floatingActionButton: _buildFloatingActionButton(),
    );
  }

  /// 构建应用栏
  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      title: const Text('自选基金'),
      backgroundColor: Theme.of(context).colorScheme.surface,
      elevation: 0,
      actions: [
        PopupMenuButton<String>(
          icon: const Icon(Icons.more_vert),
          onSelected: _handleMenuAction,
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'sort',
              child: Row(
                children: [
                  Icon(Icons.sort),
                  SizedBox(width: 8),
                  Text('排序方式'),
                ],
              ),
            ),
            const PopupMenuItem(
              value: 'clear_all',
              child: Row(
                children: [
                  Icon(Icons.clear_all, color: Colors.red),
                  SizedBox(width: 8),
                  Text('清空全部', style: TextStyle(color: Colors.red)),
                ],
              ),
            ),
            const PopupMenuItem(
              value: 'refresh',
              child: Row(
                children: [
                  Icon(Icons.refresh),
                  SizedBox(width: 8),
                  Text('刷新数据'),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  /// 构建搜索和筛选区域
  Widget _buildSearchAndFilterSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // 智能搜索框
          _buildSmartSearchField(),
          const SizedBox(height: 12),

          // 搜索建议（仅在搜索时显示）
          _buildSearchSuggestions(),
          const SizedBox(height: 8),

          // 快速筛选按钮
          _buildQuickFilterChips(),
        ],
      ),
    );
  }

  /// 构建筛选芯片
  Widget _buildFilterChip(String label, VoidCallback onTap, {bool isSelected = false}) {
    return FilterChip(
      label: Text(label),
      selected: isSelected,
      onSelected: (_) => onTap(),
      backgroundColor: Colors.grey[200],
      selectedColor: Theme.of(context).primaryColor.withOpacity(0.2),
      checkmarkColor: Theme.of(context).primaryColor,
    );
  }

  /// 构建内容区域
  Widget _buildContentSection() {
    return Expanded(
      child: BlocBuilder<FundFavoriteCubit, FundFavoriteState>(
        builder: (context, state) {
          try {
            if (state is FundFavoriteInitial) {
              return _buildInitialState();
            } else if (state is FundFavoriteLoading) {
              return _buildLoadingState();
            } else if (state is FundFavoriteLoaded) {
              return _buildLoadedState(context, state);
            } else if (state is FundFavoriteError) {
              return _buildErrorState(state.error);
            } else if (state is FundFavoriteOperationSuccess) {
              // 延迟显示成功消息，避免context问题
              Future.microtask(() {
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(state.message),
                      backgroundColor: Colors.green,
                    ),
                  );
                }
              });
              return _buildLoadedState(context, state.previousState);
            } else {
              return _buildInitialState();
            }
          } catch (e) {
            print('构建内容时出错: $e');
            return _buildErrorState('页面渲染出错，请重试');
          }
        },
      ),
    );
  }

  /// 构建初始状态
  Widget _buildInitialState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.star_outline,
            size: 64,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            '暂无自选基金',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.w600,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            '点击下方按钮添加您关注的基金',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[500],
            ),
          ),
        ],
      ),
    );
  }

  /// 构建加载状态
  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(),
          SizedBox(height: 16),
          Text('加载中...'),
        ],
      ),
    );
  }

  /// 构建数据加载完成状态
  Widget _buildLoadedState(BuildContext context, FundFavoriteLoaded state) {
    try {
      // 安全检查
      if (state.displayFavorites.isEmpty) {
        return _buildEmptySearchState(state.searchQuery);
      }

      return RefreshIndicator(
        onRefresh: () async {
          if (context.mounted) {
            context.read<FundFavoriteCubit>().refresh();
          }
        },
        child: Column(
          children: [
            // 统计信息栏
            _buildStatsBar(state),

            // 基金列表
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.all(16),
                itemCount: state.displayFavorites.length,
                itemBuilder: (context, index) {
                  try {
                    if (index >= 0 && index < state.displayFavorites.length) {
                      final favorite = state.displayFavorites[index];
                      return _buildFavoriteCard(context, favorite);
                    }
                    return const SizedBox.shrink();
                  } catch (e) {
                    print('构建基金卡片时出错 (index: $index): $e');
                    return const SizedBox.shrink();
                  }
                },
              ),
            ),
          ],
        ),
      );
    } catch (e) {
      print('构建加载状态时出错: $e');
      return _buildErrorState('数据加载出错，请重试');
    }
  }

  /// 构建空搜索状态
  Widget _buildEmptySearchState(String searchQuery) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.search_off,
            size: 64,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            '未找到相关基金',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            '搜索词: "$searchQuery"',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[500],
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              _searchController.clear();
              context.read<FundFavoriteCubit>().searchFavorites('');
            },
            child: const Text('清除搜索'),
          ),
        ],
      ),
    );
  }

  /// 构建统计信息栏
  Widget _buildStatsBar(FundFavoriteLoaded state) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).primaryColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: [
          Icon(
            Icons.analytics_outlined,
            color: Theme.of(context).primaryColor,
            size: 20,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              state.searchQuery.isEmpty
                  ? '共 ${state.favoriteCount} 只自选基金'
                  : '找到 ${state.displayFavorites.length} 只相关基金',
              style: TextStyle(
                color: Theme.of(context).primaryColor,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          if (state.lastMessage != null) ...[
            Container(
              width: 4,
              height: 4,
              decoration: BoxDecoration(
                color: Theme.of(context).primaryColor,
                shape: BoxShape.circle,
              ),
            ),
            const SizedBox(width: 8),
            Text(
              state.lastMessage!,
              style: TextStyle(
                color: Theme.of(context).primaryColor,
                fontSize: 12,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// 构建自选基金卡片
  Widget _buildFavoriteCard(BuildContext context, FundFavorite favorite) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 0,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(color: Colors.grey[200]!),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: () {
          // TODO: 导航到基金详情页
        },
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              // 基金信息
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Text(
                          favorite.fundCode,
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 6,
                            vertical: 2,
                          ),
                          decoration: BoxDecoration(
                            color: _getFundTypeColor(favorite.fundType).withOpacity(0.1),
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: Text(
                            favorite.fundType,
                            style: TextStyle(
                              color: _getFundTypeColor(favorite.fundType),
                              fontSize: 10,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      favorite.fundName,
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    if (favorite.notes != null) ...[
                      const SizedBox(height: 4),
                      Text(
                        favorite.notes!,
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[500],
                          fontStyle: FontStyle.italic,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ],
                ),
              ),

              // 净值信息
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  if (favorite.currentNav != null) ...[
                    Text(
                      '¥${favorite.currentNav!.toStringAsFixed(4)}',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                    const SizedBox(height: 4),
                    _buildChangeIndicator(favorite.dailyChange),
                  ] else ...[
                    Text(
                      '--',
                      style: TextStyle(
                        color: Colors.grey[400],
                        fontSize: 16,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '暂无数据',
                      style: TextStyle(
                        color: Colors.grey[400],
                        fontSize: 12,
                      ),
                    ),
                  ],
                ],
              ),

              const SizedBox(width: 12),

              // 操作按钮
              PopupMenuButton<String>(
                icon: Icon(Icons.more_vert, color: Colors.grey[600]),
                onSelected: (value) => _handleFavoriteAction(context, favorite, value),
                itemBuilder: (context) => [
                  const PopupMenuItem(
                    value: 'edit',
                    child: Row(
                      children: [
                        Icon(Icons.edit, size: 16),
                        SizedBox(width: 8),
                        Text('编辑'),
                      ],
                    ),
                  ),
                  const PopupMenuItem(
                    value: 'add_to_portfolio',
                    child: Row(
                      children: [
                        Icon(Icons.add_chart, size: 16, color: Colors.blue),
                        SizedBox(width: 8),
                        Text('添加到持仓', style: TextStyle(color: Colors.blue)),
                      ],
                    ),
                  ),
                  const PopupMenuItem(
                    value: 'remove',
                    child: Row(
                      children: [
                        Icon(Icons.remove_circle_outline, size: 16, color: Colors.red),
                        SizedBox(width: 8),
                        Text('移除', style: TextStyle(color: Colors.red)),
                      ],
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// 构建涨跌指标
  Widget _buildChangeIndicator(double? change) {
    if (change == null) {
      return Text(
        '--',
        style: TextStyle(
          color: Colors.grey[400],
          fontSize: 12,
        ),
      );
    }

    final isPositive = change >= 0;
    final color = isPositive ? Colors.red : Colors.green;
    final sign = isPositive ? '+' : '';

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(4),
      ),
      child: Text(
        '$sign${change.toStringAsFixed(2)}%',
        style: TextStyle(
          color: color,
          fontSize: 12,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }

  /// 构建错误状态
  Widget _buildErrorState(String error) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 64,
            color: Colors.red[400],
          ),
          const SizedBox(height: 16),
          Text(
            '出错了',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.w600,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            error,
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              context.read<FundFavoriteCubit>().refresh();
            },
            child: const Text('重试'),
          ),
        ],
      ),
    );
  }

  /// 构建浮动操作按钮
  Widget _buildFloatingActionButton() {
    return FloatingActionButton.extended(
      onPressed: _showAddFavoriteDialog,
      icon: const Icon(Icons.add),
      label: const Text('添加基金'),
    );
  }

  /// 处理菜单操作
  void _handleMenuAction(String action) {
    switch (action) {
      case 'sort':
        _showSortDialog();
        break;
      case 'clear_all':
        _showClearAllDialog();
        break;
      case 'refresh':
        context.read<FundFavoriteCubit>().refresh();
        break;
    }
  }

  /// 处理基金卡片操作
  void _handleFavoriteAction(BuildContext context, FundFavorite favorite, String action) {
    switch (action) {
      case 'edit':
        _showEditFavoriteDialog(favorite);
        break;
      case 'add_to_portfolio':
        _showAddToPortfolioDialog(favorite);
        break;
      case 'remove':
        _showRemoveFavoriteDialog(favorite);
        break;
    }
  }

  /// 显示添加到持仓对话框
  void _showAddToPortfolioDialog(FundFavorite favorite) {
    showDialog(
      context: context,
      builder: (context) => _AddToPortfolioDialog(
        favorite: favorite,
        onConfirm: (holding) {
          // TODO: 实现添加到持仓的逻辑
          // 这里需要调用 PortfolioAnalysisCubit 来添加持仓
          _navigateToPortfolioPage();
        },
      ),
    );
  }

  /// 导航到持仓分析页面
  void _navigateToPortfolioPage() {
    // 使用 Navigator 导航到持仓分析页面
    final context = this.context;
    if (context.mounted) {
      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => const PortfolioAnalysisPage(),
        ),
      );
    }
  }

  /// 显示添加自选基金对话框
  void _showAddFavoriteDialog() {
    showDialog(
      context: context,
      builder: (context) => _AddFavoriteDialog(
        onAdd: (favorite) {
          context.read<FundFavoriteCubit>().addFavorite(favorite);
        },
      ),
    );
  }

  /// 显示编辑自选基金对话框
  void _showEditFavoriteDialog(FundFavorite favorite) {
    showDialog(
      context: context,
      builder: (context) => _EditFavoriteDialog(
        favorite: favorite,
        onUpdate: (updatedFavorite) {
          context.read<FundFavoriteCubit>().updateFavorite(updatedFavorite);
        },
      ),
    );
  }

  /// 显示移除确认对话框
  void _showRemoveFavoriteDialog(FundFavorite favorite) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('确认移除'),
        content: Text('确定要从自选中移除 ${favorite.fundName} 吗？'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('取消'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              context.read<FundFavoriteCubit>().removeFavorite(favorite.fundCode);
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('移除'),
          ),
        ],
      ),
    );
  }

  /// 显示排序对话框
  void _showSortDialog() {
    showDialog(
      context: context,
      builder: (context) => _SortDialog(
        currentSortType: _currentSortType,
        currentSortDirection: _currentSortDirection,
        onSort: (type, direction) {
          setState(() {
            _currentSortType = type;
            _currentSortDirection = direction;
          });
          context.read<FundFavoriteCubit>().sortFavorites(type, direction);
        },
      ),
    );
  }

  /// 显示清空全部确认对话框
  void _showClearAllDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('确认清空'),
        content: const Text('确定要清空所有自选基金吗？此操作不可恢复。'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('取消'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              context.read<FundFavoriteCubit>().clearAllFavorites();
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('清空全部'),
          ),
        ],
      ),
    );
  }

  /// 获取基金类型颜色
  Color _getFundTypeColor(String fundType) {
    switch (fundType) {
      case '股票型':
        return Colors.red;
      case '债券型':
        return Colors.blue;
      case '混合型':
        return Colors.orange;
      case '货币型':
        return Colors.green;
      case '指数型':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  /// 初始化智能搜索
  void _initializeSmartSearch() async {
    _loadSearchHistory();
    _loadPopularSearches();

    // 初始化高性能服务
    try {
      await _fundService.initialize();
      // 预加载数据 - 在空闲时间触发
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted) {
          // 使用智能预加载管理器
    // await _preloadManager.triggerBehaviorPreload('000001');
        }
      });
    } catch (e) {
      // 忽略初始化错误，不影响页面正常使用
    }
  }

  
  /// 加载搜索历史
  void _loadSearchHistory() {
    // 模拟从本地存储加载搜索历史
    setState(() {
      _searchHistory = [
        '易方达',
        '华夏',
        '南方',
        '嘉实',
        '博时',
      ];
    });
  }

  /// 加载热门搜索
  void _loadPopularSearches() {
    setState(() {
      _popularSearches = [
        '易方达蓝筹',
        '富国天惠',
        '兴全合润',
        '汇添富价值',
      ];
    });
  }

  /// 构建智能搜索框
  Widget _buildSmartSearchField() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.03),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextField(
        controller: _searchController,
        focusNode: _searchFocusNode,
        decoration: InputDecoration(
          hintText: '搜索基金代码或名称...',
          prefixIcon: Icon(Icons.search, color: Colors.grey[600]),
          suffixIcon: _isSearching
              ? Container(
                  width: 20,
                  height: 20,
                  margin: EdgeInsets.all(12),
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
              : IconButton(
                  icon: Icon(Icons.clear, color: Colors.grey[600]),
                  onPressed: () {
                    _searchController.clear();
                    setState(() {
                      _searchSuggestions.clear();
                      _isSearching = false;
                    });
                  },
                ),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide.none,
          ),
          filled: true,
          fillColor: Colors.grey[50],
          contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        ),
        onChanged: (value) {
          if (value.trim().isEmpty) {
            setState(() {
              _searchSuggestions.clear();
              _isSearching = false;
            });
            return;
          }

          // 防抖搜索
          _searchDebounce?.cancel();
          _searchDebounce = Timer(Duration(milliseconds: 300), () {
            _performSearch(value.trim());
          });
        },
        onSubmitted: (value) {
          if (value.trim().isNotEmpty) {
            _addToSearchHistory(value.trim());
          }
        },
      ),
    );
  }

  /// 执行搜索
  void _performSearch(String query) async {
    setState(() => _isSearching = true);

    try {
      // 使用优化搜索服务，增加建议数量到20条
      final searchResult = await _fundService.searchFunds(query);
      setState(() {
        _searchSuggestions = searchResult.funds.take(20).map((fund) => models.FundInfo(
          code: fund.code,
          name: fund.name,
          type: fund.type,
          pinyinAbbr: fund.pinyinAbbr,
          pinyinFull: fund.pinyinFull,
        )).toList();
        _isSearching = false;
      });
    } catch (e) {
      setState(() => _isSearching = false);
    }
  }

  /// 获取搜索建议
  Future<List<String>> _getSearchSuggestions(String prefix) async {
    try {
      // 使用智能缓存管理器获取搜索建议
      return await _cacheManager.getSearchSuggestions(prefix);
    } catch (e) {
      return [];
    }
  }

  /// 添加到搜索历史
  void _addToSearchHistory(String query) {
    setState(() {
      _searchHistory.remove(query);
      _searchHistory.insert(0, query);
      if (_searchHistory.length > 10) {
        _searchHistory = _searchHistory.take(10).toList();
      }
    });
  }

  /// 构建搜索建议
  Widget _buildSearchSuggestions() {
    if (_searchSuggestions.isEmpty && !_isSearching) {
      return _buildSearchHistory();
    }

    if (_isSearching) {
      return Container(
        height: 200,
        child: Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    return Container(
      height: 300,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(bottom: Radius.circular(12)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // 搜索结果统计头部
          Container(
            padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            decoration: BoxDecoration(
              border: Border(bottom: BorderSide(color: Colors.grey[200]!)),
            ),
            child: Row(
              children: [
                Icon(Icons.search, color: Colors.blue, size: 16),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '找到 ${_searchSuggestions.length} 只基金 (无限制搜索)',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey[600],
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
                if (_searchSuggestions.length >= 20)
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                    decoration: BoxDecoration(
                      color: Colors.blue[50],
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Text(
                      '显示前20条',
                      style: TextStyle(
                        fontSize: 10,
                        color: Colors.blue[700],
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
              ],
            ),
          ),
          // 搜索结果列表
          Expanded(
            child: ListView.builder(
              itemCount: _searchSuggestions.length,
              itemBuilder: (context, index) {
              final suggestion = _searchSuggestions[index];
              return ListTile(
                leading: CircleAvatar(
                  radius: 16,
                  backgroundColor: Colors.blue[50],
                  child: Text(
                    suggestion.code.substring(0, 3),
                    style: TextStyle(fontSize: 10, fontWeight: FontWeight.bold),
                  ),
                ),
                title: Text(suggestion.name),
                subtitle: Text('${suggestion.code} · ${suggestion.simplifiedType}'),
                onTap: () => _selectFund(suggestion),
              );
            },
            ),
          ),
        ],
      ),
    );
  }

  /// 构建搜索历史
  Widget _buildSearchHistory() {
    if (_searchHistory.isEmpty) {
      return SizedBox.shrink();
    }

    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(bottom: Radius.circular(12)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: EdgeInsets.all(16),
            child: Text(
              '搜索历史',
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.grey[600],
              ),
            ),
          ),
          ..._searchHistory.map((query) => ListTile(
            leading: Icon(Icons.history, color: Colors.grey[600]),
            title: Text(query),
            onTap: () {
              _searchController.text = query;
              _performSearch(query);
            },
            trailing: IconButton(
              icon: Icon(Icons.close, size: 16),
              onPressed: () {
                setState(() {
                  _searchHistory.remove(query);
                });
              },
            ),
          )).toList(),
        ],
      ),
    );
  }

  /// 构建快速筛选芯片
  Widget _buildQuickFilterChips() {
    final filters = ['股票型', '混合型', '债券型', '指数型'];

    return Container(
      height: 40,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: filters.length,
        itemBuilder: (context, index) {
          final filter = filters[index];
          return Container(
            margin: EdgeInsets.only(right: 8),
            child: FilterChip(
              label: Text(filter),
              selected: false,
              onSelected: (selected) {
                _searchController.text = filter;
                _performSearch(filter);
              },
              backgroundColor: Colors.grey[100],
              selectedColor: Colors.blue[50],
              checkmarkColor: Colors.blue[600],
              labelStyle: TextStyle(
                color: Colors.grey[700],
                fontSize: 12,
              ),
            ),
          );
        },
      ),
    );
  }

  /// 选择基金
  void _selectFund(models.FundInfo fund) {
    setState(() {
      _searchSuggestions.clear();
    });
    _searchController.text = fund.name;
    // 这里可以添加选择基金后的逻辑
  }

  /// 隐藏搜索结果
  void _hideSearchResults() {
    setState(() {
      _searchSuggestions.clear();
      _isSearching = false;
    });
  }
}

/// 添加自选基金对话框
class _AddFavoriteDialog extends StatefulWidget {
  final Function(FundFavorite) onAdd;

  const _AddFavoriteDialog({required this.onAdd});

  @override
  State<_AddFavoriteDialog> createState() => _AddFavoriteDialogState();
}

class _AddFavoriteDialogState extends State<_AddFavoriteDialog> {
  final _formKey = GlobalKey<FormState>();
  final _fundCodeController = TextEditingController();
  final _fundNameController = TextEditingController();
  final _fundManagerController = TextEditingController();
  final _notesController = TextEditingController();
  bool _isLoading = false;

  // 智能搜索相关状态
  List<models.FundInfo> _searchResults = [];
  bool _isSearching = false;
  bool _showSearchResults = false;
  final LayerLink _layerLink = LayerLink();
  OverlayEntry? _overlayEntry;
  final FocusNode _fundCodeFocusNode = FocusNode();

  /// 通过API直接获取基金类型
  Future<String> _getFundType(String fundCode) async {
    try {
      print('🔍 开始查找基金 $fundCode 的类型...');

      final response = await http.get(
        Uri.parse('http://154.44.25.92:8080/api/public/fund_name_em'),
        headers: {'Accept': 'application/json'},
      ).timeout(const Duration(seconds: 10));

      if (response.statusCode == 200) {
        final List<dynamic> funds = json.decode(response.body);
        print('📊 获取到 ${funds.length} 只基金数据');

        // 直接查找基金
        final fund = funds.firstWhere(
          (f) => f['基金代码']?.toString() == fundCode,
          orElse: () => null,
        );

        if (fund != null && fund['基金类型'] != null) {
          String fundType = fund['基金类型'].toString();
          // 简化基金类型显示，取主要类型
          if (fundType.contains('-')) {
            fundType = fundType.split('-')[0];
          }
          print('✅ 找到基金 $fundCode: ${fund['基金简称']} - $fundType');
          return fundType;
        } else {
          print('⚠️ 未找到基金 $fundCode 的类型信息');
          // 尝试缓存获取作为备用
          final cachedType = FundDataCacheService.instance.getFundType(fundCode);
          if (cachedType != '未知类型') {
            print('🔄 从缓存获取到类型: $cachedType');
            return cachedType;
          }
        }
      } else {
        print('❌ API请求失败，状态码: ${response.statusCode}');
      }
    } catch (e) {
      print('❌ 获取基金类型失败: $e');
    }

    // 最后的备用方案：从缓存获取或根据代码推断
    final cachedType = FundDataCacheService.instance.getFundType(fundCode);
    if (cachedType != '未知类型') {
      return cachedType;
    }

    return _inferFundTypeFromCode(fundCode);
  }

  /// 根据基金代码推断基金类型（备用方案）
  String _inferFundTypeFromCode(String fundCode) {
    if (fundCode.startsWith('00')) {
      return '混合型';
    } else if (fundCode.startsWith('11')) {
      return '债券型';
    } else if (fundCode.startsWith('15')) {
      return '指数型';
    } else if (fundCode.startsWith('16')) {
      return '债券型';
    } else if (fundCode.startsWith('18')) {
      return '股票型';
    } else if (fundCode.startsWith('50')) {
      return '指数型';
    } else if (fundCode.startsWith('51')) {
      return '指数型';
    } else if (fundCode.startsWith('52')) {
      return '货币型';
    } else {
      return '未知类型';
    }
  }

  /// 初始化搜索功能
  void _initializeSearch() async {
    await _fundService.initialize();
    await _cacheManager.initialize();
  }

  /// 搜索基金
  void _searchFunds(String query) async {
    if (query.isEmpty) {
      _hideSearchResults();
      return;
    }

    setState(() {
      _isSearching = true;
    });

    try {
      // 使用优化搜索服务进行无限制搜索
      final searchResult = await _fundService.searchFunds(query);

      setState(() {
        _searchResults = searchResult.funds.map((fund) => models.FundInfo(
          code: fund.code,
          name: fund.name,
          type: fund.type,
          pinyinAbbr: fund.pinyinAbbr,
          pinyinFull: fund.pinyinFull,
        )).toList();
        _isSearching = false;
        _showSearchResults = true;
      });
      _showSearchOverlay();
      return;
    }

    } catch (e) {
      // 如果优化搜索失败，降级到缓存搜索
      try {
        final cachedResults = FundDataCacheService.instance.searchFunds(query, limit: 20);

        if (cachedResults.isNotEmpty) {
          setState(() {
            _searchResults = cachedResults.map((fund) => models.FundInfo(
              code: fund.code,
              name: fund.name,
              type: fund.type,
              pinyinAbbr: fund.pinyin,
              pinyinFull: fund.fullName,
            )).toList();
            _isSearching = false;
            _showSearchResults = true;
          });
          _showSearchOverlay();
          return;
        }
      } catch (cacheError) {
        // 如果缓存也失败，直接从API搜索
        final apiResults = await _searchFundsFromAPI(query, limit: 50); // 增加到50条

        setState(() {
          _searchResults = apiResults;
          _isSearching = false;
          _showSearchResults = apiResults.isNotEmpty;
        });

        if (apiResults.isNotEmpty) {
          _showSearchOverlay();
        }
      }
    }
    } catch (e) {
      print('搜索基金失败: $e');
      setState(() {
        _isSearching = false;
        _showSearchResults = false;
      });
      _hideSearchResults();
    }
  }

  /// 从API直接搜索基金
  Future<List<models.FundInfo>> _searchFundsFromAPI(String query, {int limit = 10}) async {
    try {
      print('🔍 从API搜索基金: $query');

      final response = await http.get(
        Uri.parse('http://154.44.25.92:8080/api/public/fund_name_em'),
        headers: {'Accept': 'application/json'},
      ).timeout(const Duration(seconds: 10));

      if (response.statusCode == 200) {
        final List<dynamic> funds = json.decode(response.body);
        final queryLower = query.toLowerCase();
        final results = <models.FundInfo>[];

        // 精确匹配基金代码
        final exactMatch = funds.firstWhere(
          (f) => f['基金代码']?.toString() == query,
          orElse: () => null,
        );

        if (exactMatch != null) {
          final fundInfo = _convertToFundInfo(exactMatch);
          if (fundInfo != null) results.add(fundInfo);
        }

        // 模糊搜索
        for (final fund in funds) {
          if (results.length >= limit) break;

          final fundInfo = _convertToFundInfo(fund);
          if (fundInfo == null) continue;
          if (results.any((r) => r.code == fundInfo.code)) continue;

          // 代码匹配
          if (fundInfo.code.contains(query)) {
            results.add(fundInfo);
            continue;
          }

          // 名称匹配
          if (fundInfo.name.toLowerCase().contains(queryLower)) {
            results.add(fundInfo);
            continue;
          }

          // 拼音匹配
          if (fundInfo.pinyinAbbr.toLowerCase().contains(queryLower)) {
            results.add(fundInfo);
            continue;
          }
        }

        print('✅ API搜索完成，找到 ${results.length} 只基金');
        return results.take(limit).toList();
      }
    } catch (e) {
      print('❌ API搜索失败: $e');
    }

    return [];
  }

  /// 将API数据转换为FundInfo对象
  models.FundInfo? _convertToFundInfo(dynamic fund) {
    try {
      final code = fund['基金代码']?.toString();
      final name = fund['基金简称']?.toString();
      final type = fund['基金类型']?.toString();
      final pinyin = fund['拼音缩写']?.toString();
      final fullName = fund['拼音全称']?.toString();

      if (code != null && name != null) {
        return models.FundInfo(
          code: code,
          name: name,
          type: type ?? '未知类型',
          pinyinAbbr: pinyin ?? '',
          pinyinFull: fullName ?? '',
        );
      }
    } catch (e) {
      print('⚠️ 转换基金数据失败: $e');
    }
    return null;
  }

  /// 显示搜索结果覆盖层
  void _showSearchOverlay() {
    _hideSearchResults(); // 先隐藏旧的

    _overlayEntry = OverlayEntry(
      builder: (context) => _buildSearchOverlay(),
    );

    Overlay.of(context).insert(_overlayEntry!);
  }

  /// 隐藏搜索结果
  void _hideSearchResults() {
    _overlayEntry?.remove();
    _overlayEntry = null;
    setState(() {
      _showSearchResults = false;
    });
  }

  /// 选择搜索结果中的基金
  void _selectFund(models.FundInfo fund) {
    _hideSearchResults();
    _fundCodeController.text = fund.code;
    _fundNameController.text = fund.name;

    // 自动填充基金管理人信息
    if (_fundManagerController.text.isEmpty) {
      _fundManagerController.text = '未知';
    }

    // 自动填充备注信息
    if (_notesController.text.isEmpty) {
      _notesController.text = '数据来源: http://154.44.25.92:8080';
    }

    // 移动到下一个输入框
    FocusScope.of(context).requestFocus(FocusNode());
  }

  /// 获取基金类型颜色
  Color _getFundTypeColor(String fundType) {
    switch (fundType) {
      case '股票型':
        return Colors.red;
      case '债券型':
        return Colors.blue;
      case '混合型':
        return Colors.orange;
      case '货币型':
        return Colors.green;
      case '指数型':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  /// 构建搜索结果覆盖层
  Widget _buildSearchOverlay() {
    final renderBox = context.findRenderObject() as RenderBox?;
    final size = renderBox?.size ?? Size.zero;
    final offset = renderBox?.localToGlobal(Offset.zero) ?? Offset.zero;

    return Positioned(
      left: offset.dx,
      top: offset.dy + size.height + 5,
      width: size.width,
      child: CompositedTransformFollower(
        link: _layerLink,
        showWhenUnlinked: false,
        offset: Offset(0, size.height + 5),
        child: Material(
          elevation: 8,
          borderRadius: BorderRadius.circular(12),
          child: Container(
            constraints: BoxConstraints(maxHeight: 300),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 10,
                  offset: Offset(0, 4),
                ),
              ],
            ),
            child: _isSearching
                ? Container(
                    padding: EdgeInsets.all(16),
                    child: Center(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          CircularProgressIndicator(strokeWidth: 2),
                          SizedBox(width: 8),
                          Text('搜索中...'),
                        ],
                      ),
                    ),
                  )
                : ListView.builder(
                    shrinkWrap: true,
                    itemCount: _searchResults.length,
                    itemBuilder: (context, index) {
                      final fund = _searchResults[index];
                      return _buildFundSearchResult(fund);
                    },
                  ),
          ),
        ),
      ),
    );
  }

  /// 构建单个基金搜索结果项
  Widget _buildFundSearchResult(models.FundInfo fund) {
    return InkWell(
      onTap: () => _selectFund(fund),
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          border: Border(
            bottom: BorderSide(
              color: Colors.grey.withOpacity(0.2),
              width: 0.5,
            ),
          ),
        ),
        child: Row(
          children: [
            // 基金代码
            Container(
              padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Text(
                fund.code,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                  fontSize: 12,
                ),
              ),
            ),
            SizedBox(width: 12),

            // 基金名称
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    fund.name,
                    style: TextStyle(
                      fontWeight: FontWeight.w500,
                      fontSize: 14,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  SizedBox(height: 2),
                  Text(
                    fund.simplifiedType,
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),

            // 类型标签
            Container(
              padding: EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: _getFundTypeColor(fund.simplifiedType).withOpacity(0.1),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Text(
                fund.simplifiedType,
                style: TextStyle(
                  color: _getFundTypeColor(fund.simplifiedType),
                  fontSize: 10,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    _initializeSearch();
  }

  @override
  void dispose() {
    _hideSearchResults();
    _fundCodeController.dispose();
    _fundNameController.dispose();
    _fundManagerController.dispose();
    _notesController.dispose();
    _fundCodeFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Row(
        children: [
          Icon(Icons.add_circle, color: Theme.of(context).primaryColor),
          const SizedBox(width: 8),
          const Text('添加自选基金'),
          Spacer(),
          if (_showSearchResults)
            IconButton(
              icon: Icon(Icons.keyboard_arrow_down, color: Theme.of(context).primaryColor),
              onPressed: _hideSearchResults,
              tooltip: '隐藏搜索结果',
            ),
        ],
      ),
      content: SizedBox(
        width: 450,
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // 基金代码输入框（支持智能搜索）
              CompositedTransformTarget(
                link: _layerLink,
                child: TextFormField(
                  controller: _fundCodeController,
                  focusNode: _fundCodeFocusNode,
                  decoration: InputDecoration(
                    labelText: '基金代码/名称搜索 *',
                    hintText: '输入基金代码、名称或拼音，如：000001、华夏、HXCZHH',
                    prefixIcon: _isSearching
                        ? SizedBox(
                            width: 20,
                            height: 20,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                        : const Icon(Icons.search),
                    suffixIcon: _fundCodeController.text.isNotEmpty
                        ? IconButton(
                            icon: const Icon(Icons.clear),
                            onPressed: () {
                              setState(() {
                                _fundCodeController.clear();
                                _hideSearchResults();
                              });
                            },
                          )
                        : null,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    filled: true,
                    fillColor: _showSearchResults ? Colors.blue.withOpacity(0.05) : Colors.grey[50],
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: _showSearchResults
                            ? Theme.of(context).primaryColor.withOpacity(0.5)
                            : Colors.grey.withOpacity(0.3),
                        width: _showSearchResults ? 2 : 1,
                      ),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: Theme.of(context).primaryColor,
                        width: 2,
                      ),
                    ),
                  ),
                  onChanged: (value) {
                    // 实时搜索
                    _searchFunds(value.trim());
                  },
                  onTap: () {
                    // 如果有内容，显示搜索结果
                    if (_fundCodeController.text.trim().isNotEmpty) {
                      _searchFunds(_fundCodeController.text.trim());
                    }
                  },
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return '请输入基金代码或名称';
                    }
                    // 如果是纯数字，检查是否为6位
                    if (RegExp(r'^\d+$').hasMatch(value.trim())) {
                      if (value.trim().length != 6) {
                        return '基金代码必须为6位数字';
                      }
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(height: 8),

              // 搜索提示
              if (_showSearchResults && _searchResults.isNotEmpty)
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  decoration: BoxDecoration(
                    color: Theme.of(context).primaryColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.lightbulb_outline,
                           size: 16,
                           color: Theme.of(context).primaryColor),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          '找到 ${_searchResults.length} 只匹配基金，点击选择',
                          style: TextStyle(
                            fontSize: 12,
                            color: Theme.of(context).primaryColor,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _fundNameController,
                decoration: InputDecoration(
                  labelText: '基金名称 *',
                  hintText: '例如: 华夏成长混合',
                  prefixIcon: const Icon(Icons.description),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  filled: true,
                  fillColor: Colors.grey[50],
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return '请输入基金名称';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _fundManagerController,
                decoration: InputDecoration(
                  labelText: '基金管理人',
                  hintText: '例如: 华夏基金管理有限公司',
                  prefixIcon: const Icon(Icons.business),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  filled: true,
                  fillColor: Colors.grey[50],
                ),
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _notesController,
                decoration: InputDecoration(
                  labelText: '备注',
                  hintText: '添加个人备注信息...',
                  prefixIcon: const Icon(Icons.note),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  filled: true,
                  fillColor: Colors.grey[50],
                ),
                maxLines: 2,
              ),
              const SizedBox(height: 16),
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.blue.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info_outline, color: Colors.blue[700], size: 18),
                        const SizedBox(width: 8),
                        Text(
                          '📡 数据来源',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue[700],
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '🌐 API地址: http://154.44.25.92:8080\n'
                      '📊 数据类型: 基金净值、涨跌幅、基本信息\n'
                      '🔄 更新频率: 实时同步',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.blue[600],
                        height: 1.4,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('取消'),
        ),
        ElevatedButton.icon(
          onPressed: _isLoading ? null : _handleSubmit,
          icon: _isLoading
            ? const SizedBox(
                width: 16,
                height: 16,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              )
            : const Icon(Icons.add),
          label: Text(_isLoading ? '获取基金类型中...' : '添加基金'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Theme.of(context).primaryColor,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          ),
        ),
      ],
    );
  }

  void _handleSubmit() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      try {
        final fundCode = _fundCodeController.text.trim().toUpperCase();
        final fundName = _fundNameController.text.trim();
        final fundManager = _fundManagerController.text.trim().isEmpty
            ? '未知'
            : _fundManagerController.text.trim();
        final notes = _notesController.text.trim().isEmpty
            ? '数据来源: http://154.44.25.92:8080'
            : _notesController.text.trim();

        // 动态获取基金类型
        final fundType = await _getFundType(fundCode);

        final favorite = FundFavorite(
          fundCode: fundCode,
          fundName: fundName, // 使用用户输入的名称
          fundType: fundType, // 使用API获取的真实类型
          fundManager: fundManager, // 使用用户输入的管理人或默认值
          addedAt: DateTime.now(),
          updatedAt: DateTime.now(),
          notes: notes, // 使用用户输入的备注或默认值
        );

        widget.onAdd(favorite);
        Navigator.of(context).pop();

        // 显示成功提示
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.check_circle, color: Colors.white),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '✅ 成功添加: $fundCode - $fundName ($fundType)',
                    style: const TextStyle(fontSize: 14),
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 2),
            action: SnackBarAction(
              label: '查看',
              textColor: Colors.white,
              onPressed: () {
                // 可以添加导航到详情页的逻辑
              },
            ),
          ),
        );
      } catch (e) {
        // 显示错误提示
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.error, color: Colors.white),
                const SizedBox(width: 8),
                Expanded(
                  child: Text('❌ 添加失败: $e'),
                ),
              ],
            ),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 4),
          ),
        );
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }
}

/// 编辑自选基金对话框
class _EditFavoriteDialog extends StatefulWidget {
  final FundFavorite favorite;
  final Function(FundFavorite) onUpdate;

  const _EditFavoriteDialog({
    required this.favorite,
    required this.onUpdate,
  });

  @override
  State<_EditFavoriteDialog> createState() => _EditFavoriteDialogState();
}

class _EditFavoriteDialogState extends State<_EditFavoriteDialog> {
  final _formKey = GlobalKey<FormState>();
  late final TextEditingController _fundNameController;
  late final TextEditingController _fundManagerController;
  late final TextEditingController _notesController;
  late String _selectedFundType;

  final List<String> _fundTypes = [
    '股票型', '债券型', '混合型', '货币型', '指数型', 'QDII', 'FOF', '未知类型'
  ];

  @override
  void initState() {
    super.initState();
    _fundNameController = TextEditingController(text: widget.favorite.fundName);
    _fundManagerController = TextEditingController(text: widget.favorite.fundManager);
    _notesController = TextEditingController(text: widget.favorite.notes ?? '');

    // 初始化选择的基金类型，确保它在选项列表中
    _selectedFundType = _fundTypes.contains(widget.favorite.fundType)
        ? widget.favorite.fundType
        : '未知类型';
  }

  @override
  void dispose() {
    _fundNameController.dispose();
    _fundManagerController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('编辑自选基金'),
      content: SizedBox(
        width: 400,
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                '基金代码: ${widget.favorite.fundCode}',
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _fundNameController,
                decoration: const InputDecoration(
                  labelText: '基金名称 *',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '请输入基金名称';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 12),
              DropdownButtonFormField<String>(
                value: _selectedFundType,
                decoration: const InputDecoration(
                  labelText: '基金类型 *',
                ),
                items: _fundTypes.map((type) {
                  return DropdownMenuItem(
                    value: type,
                    child: Text(type),
                  );
                }).toList(),
                onChanged: (value) {
                  if (value != null) {
                    setState(() {
                      _selectedFundType = value;
                    });
                  }
                },
              ),
              const SizedBox(height: 12),
              TextFormField(
                controller: _fundManagerController,
                decoration: const InputDecoration(
                  labelText: '基金管理人',
                ),
              ),
              const SizedBox(height: 12),
              TextFormField(
                controller: _notesController,
                decoration: const InputDecoration(
                  labelText: '备注',
                ),
                maxLines: 2,
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('取消'),
        ),
        ElevatedButton(
          onPressed: _handleSubmit,
          child: const Text('保存'),
        ),
      ],
    );
  }

  void _handleSubmit() {
    if (_formKey.currentState!.validate()) {
      final updatedFavorite = widget.favorite.copyWith(
        fundName: _fundNameController.text.trim(),
        fundType: _selectedFundType,
        fundManager: _fundManagerController.text.trim().isEmpty
            ? '未知'
            : _fundManagerController.text.trim(),
        notes: _notesController.text.trim().isEmpty
            ? null
            : _notesController.text.trim(),
        updatedAt: DateTime.now(),
      );

      widget.onUpdate(updatedFavorite);
      Navigator.of(context).pop();
    }
  }
}

/// 排序对话框
class _SortDialog extends StatefulWidget {
  final FundFavoriteSortType currentSortType;
  final FundFavoriteSortDirection currentSortDirection;
  final Function(FundFavoriteSortType, FundFavoriteSortDirection) onSort;

  const _SortDialog({
    required this.currentSortType,
    required this.currentSortDirection,
    required this.onSort,
  });

  @override
  State<_SortDialog> createState() => _SortDialogState();
}

class _SortDialogState extends State<_SortDialog> {
  late FundFavoriteSortType _selectedSortType;
  late FundFavoriteSortDirection _selectedDirection;

  @override
  void initState() {
    super.initState();
    _selectedSortType = widget.currentSortType;
    _selectedDirection = widget.currentSortDirection;
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('排序方式'),
      content: SizedBox(
        width: 300,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // 排序类型选择
            const Text('排序类型', style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            ...FundFavoriteSortType.values.map((type) {
              return RadioListTile<FundFavoriteSortType>(
                title: Text(_getSortTypeName(type)),
                value: type,
                groupValue: _selectedSortType,
                onChanged: (value) {
                  setState(() {
                    _selectedSortType = value!;
                  });
                },
                dense: true,
              );
            }),

            const Divider(),

            // 排序方向选择
            const Text('排序方向', style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            RadioListTile<FundFavoriteSortDirection>(
              title: const Text('升序'),
              value: FundFavoriteSortDirection.ascending,
              groupValue: _selectedDirection,
              onChanged: (value) {
                setState(() {
                  _selectedDirection = value!;
                });
              },
              dense: true,
            ),
            RadioListTile<FundFavoriteSortDirection>(
              title: const Text('降序'),
              value: FundFavoriteSortDirection.descending,
              groupValue: _selectedDirection,
              onChanged: (value) {
                setState(() {
                  _selectedDirection = value!;
                });
              },
              dense: true,
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('取消'),
        ),
        ElevatedButton(
          onPressed: () {
            widget.onSort(_selectedSortType, _selectedDirection);
            Navigator.of(context).pop();
          },
          child: const Text('确定'),
        ),
      ],
    );
  }

  String _getSortTypeName(FundFavoriteSortType sortType) {
    switch (sortType) {
      case FundFavoriteSortType.addTime:
        return '添加时间';
      case FundFavoriteSortType.fundCode:
        return '基金代码';
      case FundFavoriteSortType.fundName:
        return '基金名称';
      case FundFavoriteSortType.currentNav:
        return '当前净值';
      case FundFavoriteSortType.dailyChange:
        return '日涨跌幅';
      case FundFavoriteSortType.fundScale:
        return '基金规模';
      case FundFavoriteSortType.custom:
        return '自定义排序';
    }
  }
}

/// 添加到持仓对话框
class _AddToPortfolioDialog extends StatefulWidget {
  final FundFavorite favorite;
  final Function(PortfolioHolding) onConfirm;

  const _AddToPortfolioDialog({
    required this.favorite,
    required this.onConfirm,
  });

  @override
  State<_AddToPortfolioDialog> createState() => _AddToPortfolioDialogState();
}

class _AddToPortfolioDialogState extends State<_AddToPortfolioDialog> {
  final _formKey = GlobalKey<FormState>();
  late final TextEditingController _amountController;
  late final TextEditingController _costNavController;
  late final TextEditingController _costValueController;

  double _suggestedAmount = 1000.0;
  bool _useSuggestedAmount = true;

  @override
  void initState() {
    super.initState();
    _amountController = TextEditingController();
    _costNavController = TextEditingController();
    _costValueController = TextEditingController();

    // 计算建议的持有份额
    _calculateSuggestedAmount();

    // 如果使用当前净值作为成本
    if (widget.favorite.currentNav != null) {
      _costNavController.text = widget.favorite.currentNav!.toStringAsFixed(4);
      _updateCostValue();
    }
  }

  @override
  void dispose() {
    _amountController.dispose();
    _costNavController.dispose();
    _costValueController.dispose();
    super.dispose();
  }

  void _calculateSuggestedAmount() {
    // 简化的建议份额计算逻辑
    // 这里可以根据基金类型给出不同的建议
    _suggestedAmount = 1000.0; // 默认1000份

    if (_useSuggestedAmount) {
      _amountController.text = _suggestedAmount.toStringAsFixed(0);
    }
  }

  void _updateCostValue() {
    final amount = double.tryParse(_amountController.text) ?? 0;
    final costNav = double.tryParse(_costNavController.text) ?? 0;
    final costValue = amount * costNav;
    _costValueController.text = costValue.toStringAsFixed(2);
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('添加到持仓'),
      content: SizedBox(
        width: 450,
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // 基金信息显示
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '基金信息',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                        color: Colors.blue,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Text('代码: ${widget.favorite.fundCode}'),
                        const SizedBox(width: 16),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.blue.withOpacity(0.2),
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: Text(
                            widget.favorite.fundType,
                            style: const TextStyle(
                              color: Colors.blue,
                              fontSize: 12,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text('名称: ${widget.favorite.fundName}'),
                    if (widget.favorite.currentNav != null) ...[
                      const SizedBox(height: 4),
                      Text('当前净值: ¥${widget.favorite.currentNav!.toStringAsFixed(4)}'),
                    ],
                  ],
                ),
              ),
              const SizedBox(height: 20),

              // 持仓信息输入
              const Text(
                '持仓信息',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              const SizedBox(height: 12),

              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _amountController,
                      decoration: const InputDecoration(
                        labelText: '持有份额',
                        hintText: '请输入持有份额',
                        suffixText: '份',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.number,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return '请输入持有份额';
                        }
                        final amount = double.tryParse(value);
                        if (amount == null || amount <= 0) {
                          return '请输入有效的份额数量';
                        }
                        return null;
                      },
                      onChanged: (_) => _updateCostValue(),
                    ),
                  ),
                  const SizedBox(width: 12),
                  IconButton(
                    onPressed: () {
                      setState(() {
                        _useSuggestedAmount = true;
                        _calculateSuggestedAmount();
                        _updateCostValue();
                      });
                    },
                    tooltip: '使用建议份额',
                    icon: const Icon(Icons.lightbulb_outline, color: Colors.orange),
                  ),
                ],
              ),
              SizedBox(height: 12),

              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _costNavController,
                      decoration: InputDecoration(
                        labelText: '成本净值',
                        hintText: '请输入成本净值',
                        suffixText: '元',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.number,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return '请输入成本净值';
                        }
                        final costNav = double.tryParse(value);
                        if (costNav == null || costNav <= 0) {
                          return '请输入有效的成本净值';
                        }
                        return null;
                      },
                      onChanged: (_) => _updateCostValue(),
                    ),
                  ),
                  SizedBox(width: 12),
                  if (widget.favorite.currentNav != null)
                    TextButton(
                      onPressed: () {
                        _costNavController.text = widget.favorite.currentNav!.toStringAsFixed(4);
                        _updateCostValue();
                      },
                      child: Text('使用当前净值'),
                    ),
                ],
              ),
              const SizedBox(height: 12),

              TextFormField(
                controller: _costValueController,
                decoration: const InputDecoration(
                  labelText: '成本金额',
                  hintText: '自动计算',
                  suffixText: '元',
                  border: OutlineInputBorder(),
                  filled: true,
                  fillColor: Color(0xFFF5F5F5),
                ),
                keyboardType: TextInputType.number,
                readOnly: true,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
              ),
              const SizedBox(height: 12),

              // 投资建议
              if (_suggestedAmount > 0) ...[
                Container(
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(6),
                    border: Border.all(color: Colors.orange.withOpacity(0.3)),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.lightbulb, size: 16, color: Colors.orange[700]),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          '建议持有 ${_suggestedAmount.toStringAsFixed(0)} 份',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.orange[700],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('取消'),
        ),
        ElevatedButton(
          onPressed: _handleSubmit,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue,
            foregroundColor: Colors.white,
          ),
          child: Text('确认添加'),
        ),
      ],
    );
  }

  void _handleSubmit() {
    if (_formKey.currentState!.validate()) {
      final amount = double.parse(_amountController.text);
      final costNav = double.parse(_costNavController.text);
      final costValue = double.parse(_costValueController.text);
      final now = DateTime.now();

      final holding = PortfolioHolding(
        fundCode: widget.favorite.fundCode,
        fundName: widget.favorite.fundName,
        fundType: widget.favorite.fundType,
        holdingAmount: amount,
        costNav: costNav,
        costValue: costValue,
        marketValue: amount * (widget.favorite.currentNav ?? costNav),
        currentNav: widget.favorite.currentNav ?? costNav,
        accumulatedNav: widget.favorite.currentNav ?? costNav,
        holdingStartDate: now,
        lastUpdatedDate: now,
        dividendReinvestment: false,
        status: HoldingStatus.active,
      );

      widget.onConfirm(holding);
      Navigator.of(context).pop();
    }
  }
}
