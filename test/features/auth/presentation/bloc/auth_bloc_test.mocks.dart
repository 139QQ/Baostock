// Mocks generated by Mockito 5.4.4 from annotations
// in jisu_fund_analyzer/test/features/auth/presentation/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:jisu_fund_analyzer/src/features/auth/domain/entities/auth_result.dart'
    as _i6;
import 'package:jisu_fund_analyzer/src/features/auth/domain/entities/user.dart'
    as _i7;
import 'package:jisu_fund_analyzer/src/features/auth/domain/entities/user_session.dart'
    as _i5;
import 'package:jisu_fund_analyzer/src/features/auth/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:jisu_fund_analyzer/src/features/auth/domain/usecases/login_with_email.dart'
    as _i9;
import 'package:jisu_fund_analyzer/src/features/auth/domain/usecases/login_with_phone.dart'
    as _i8;
import 'package:jisu_fund_analyzer/src/features/auth/domain/usecases/send_verification_code.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.UserSession?> getCurrentSession() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSession,
          [],
        ),
        returnValue: _i4.Future<_i5.UserSession?>.value(),
      ) as _i4.Future<_i5.UserSession?>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>> loginWithPhone({
    required String? phoneNumber,
    required String? verificationCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithPhone,
          [],
          {
            #phoneNumber: phoneNumber,
            #verificationCode: verificationCode,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>.value(
                _FakeEither_0<_i6.AuthException, _i5.UserSession>(
          this,
          Invocation.method(
            #loginWithPhone,
            [],
            {
              #phoneNumber: phoneNumber,
              #verificationCode: verificationCode,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>> loginWithEmail({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithEmail,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>.value(
                _FakeEither_0<_i6.AuthException, _i5.UserSession>(
          this,
          Invocation.method(
            #loginWithEmail,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> sendPhoneVerificationCode(
          {required String? phoneNumber}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPhoneVerificationCode,
          [],
          {#phoneNumber: phoneNumber},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #sendPhoneVerificationCode,
            [],
            {#phoneNumber: phoneNumber},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> sendEmailVerificationCode(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerificationCode,
          [],
          {#email: email},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #sendEmailVerificationCode,
            [],
            {#email: email},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i7.User>> registerWithPhone({
    required String? phoneNumber,
    required String? verificationCode,
    required String? password,
    required String? displayName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerWithPhone,
          [],
          {
            #phoneNumber: phoneNumber,
            #verificationCode: verificationCode,
            #password: password,
            #displayName: displayName,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, _i7.User>>.value(
            _FakeEither_0<_i6.AuthException, _i7.User>(
          this,
          Invocation.method(
            #registerWithPhone,
            [],
            {
              #phoneNumber: phoneNumber,
              #verificationCode: verificationCode,
              #password: password,
              #displayName: displayName,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i7.User>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i7.User>> registerWithEmail({
    required String? email,
    required String? password,
    required String? displayName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerWithEmail,
          [],
          {
            #email: email,
            #password: password,
            #displayName: displayName,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, _i7.User>>.value(
            _FakeEither_0<_i6.AuthException, _i7.User>(
          this,
          Invocation.method(
            #registerWithEmail,
            [],
            {
              #email: email,
              #password: password,
              #displayName: displayName,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i7.User>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>> refreshToken(
          {required String? refreshToken}) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
          {#refreshToken: refreshToken},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>.value(
                _FakeEither_0<_i6.AuthException, _i5.UserSession>(
          this,
          Invocation.method(
            #refreshToken,
            [],
            {#refreshToken: refreshToken},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>> autoLogin() =>
      (super.noSuchMethod(
        Invocation.method(
          #autoLogin,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>.value(
                _FakeEither_0<_i6.AuthException, _i5.UserSession>(
          this,
          Invocation.method(
            #autoLogin,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i7.User>> getUserInfo(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
          {#userId: userId},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, _i7.User>>.value(
            _FakeEither_0<_i6.AuthException, _i7.User>(
          this,
          Invocation.method(
            #getUserInfo,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i7.User>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i7.User>> updateUserInfo({
    required String? userId,
    String? displayName,
    String? avatarUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserInfo,
          [],
          {
            #userId: userId,
            #displayName: displayName,
            #avatarUrl: avatarUrl,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, _i7.User>>.value(
            _FakeEither_0<_i6.AuthException, _i7.User>(
          this,
          Invocation.method(
            #updateUserInfo,
            [],
            {
              #userId: userId,
              #displayName: displayName,
              #avatarUrl: avatarUrl,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i7.User>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> changePassword({
    required String? userId,
    required String? oldPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [],
          {
            #userId: userId,
            #oldPassword: oldPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #changePassword,
            [],
            {
              #userId: userId,
              #oldPassword: oldPassword,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> resetPassword({
    required String? email,
    required String? resetCode,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {
            #email: email,
            #resetCode: resetCode,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #resetPassword,
            [],
            {
              #email: email,
              #resetCode: resetCode,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> sendPasswordResetEmail(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [],
          {#email: email},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #sendPasswordResetEmail,
            [],
            {#email: email},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> verifyEmail(
          {required String? verificationToken}) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyEmail,
          [],
          {#verificationToken: verificationToken},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #verifyEmail,
            [],
            {#verificationToken: verificationToken},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> verifyPhone({
    required String? phoneNumber,
    required String? verificationCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPhone,
          [],
          {
            #phoneNumber: phoneNumber,
            #verificationCode: verificationCode,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #verifyPhone,
            [],
            {
              #phoneNumber: phoneNumber,
              #verificationCode: verificationCode,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, bool>> checkUsernameAvailability(
          {required String? username}) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUsernameAvailability,
          [],
          {#username: username},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, bool>>.value(
            _FakeEither_0<_i6.AuthException, bool>(
          this,
          Invocation.method(
            #checkUsernameAvailability,
            [],
            {#username: username},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, bool>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, bool>> checkEmailAvailability(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkEmailAvailability,
          [],
          {#email: email},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, bool>>.value(
            _FakeEither_0<_i6.AuthException, bool>(
          this,
          Invocation.method(
            #checkEmailAvailability,
            [],
            {#email: email},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, bool>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, bool>> checkPhoneAvailability(
          {required String? phoneNumber}) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPhoneAvailability,
          [],
          {#phoneNumber: phoneNumber},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, bool>>.value(
            _FakeEither_0<_i6.AuthException, bool>(
          this,
          Invocation.method(
            #checkPhoneAvailability,
            [],
            {#phoneNumber: phoneNumber},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, bool>>);
}

/// A class which mocks [LoginWithPhone].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginWithPhone extends _i1.Mock implements _i8.LoginWithPhone {
  MockLoginWithPhone() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>> call({
    required String? phoneNumber,
    required String? verificationCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #phoneNumber: phoneNumber,
            #verificationCode: verificationCode,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>.value(
                _FakeEither_0<_i6.AuthException, _i5.UserSession>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #phoneNumber: phoneNumber,
              #verificationCode: verificationCode,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>);
}

/// A class which mocks [LoginWithEmail].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginWithEmail extends _i1.Mock implements _i9.LoginWithEmail {
  MockLoginWithEmail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>> call({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>.value(
                _FakeEither_0<_i6.AuthException, _i5.UserSession>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, _i5.UserSession>>);

  @override
  _i9.PasswordStrength checkPasswordStrength(String? password) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPasswordStrength,
          [password],
        ),
        returnValue: _i9.PasswordStrength.weak,
      ) as _i9.PasswordStrength);
}

/// A class which mocks [SendVerificationCode].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendVerificationCode extends _i1.Mock
    implements _i10.SendVerificationCode {
  MockSendVerificationCode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> sendPhoneCode(
          {required String? phoneNumber}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPhoneCode,
          [],
          {#phoneNumber: phoneNumber},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #sendPhoneCode,
            [],
            {#phoneNumber: phoneNumber},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> sendEmailCode(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmailCode,
          [],
          {#email: email},
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #sendEmailCode,
            [],
            {#email: email},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);

  @override
  _i4.Future<_i2.Either<_i6.AuthException, void>> call({
    required String? recipient,
    required _i10.VerificationCodeType? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #recipient: recipient,
            #type: type,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthException, void>>.value(
            _FakeEither_0<_i6.AuthException, void>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #recipient: recipient,
              #type: type,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthException, void>>);
}
