// Mocks generated by Mockito 5.4.4 from annotations
// in jisu_fund_analyzer/test/features/fund/fund_search_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:jisu_fund_analyzer/src/features/fund/domain/entities/fund_search_criteria.dart'
    as _i2;
import 'package:jisu_fund_analyzer/src/features/fund/domain/usecases/fund_search_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchResult_0 extends _i1.SmartFake implements _i2.SearchResult {
  _FakeSearchResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FundSearchUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFundSearchUseCase extends _i1.Mock implements _i3.FundSearchUseCase {
  MockFundSearchUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SearchResult> search(_i2.FundSearchCriteria? criteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [criteria],
        ),
        returnValue: _i4.Future<_i2.SearchResult>.value(_FakeSearchResult_0(
          this,
          Invocation.method(
            #search,
            [criteria],
          ),
        )),
      ) as _i4.Future<_i2.SearchResult>);

  @override
  Map<String, dynamic> getPerformanceStats() => (super.noSuchMethod(
        Invocation.method(
          #getPerformanceStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> warmupCache() => (super.noSuchMethod(
        Invocation.method(
          #warmupCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
