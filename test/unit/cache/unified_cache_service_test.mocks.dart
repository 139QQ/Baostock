// Mocks generated by Mockito 5.4.4 from annotations
// in jisu_fund_analyzer/test/unit/cache/unified_cache_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:jisu_fund_analyzer/src/core/cache/config/cache_config_manager.dart'
    as _i5;
import 'package:jisu_fund_analyzer/src/core/cache/interfaces/i_unified_cache_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStorageStatistics_0 extends _i1.SmartFake
    implements _i2.StorageStatistics {
  _FakeStorageStatistics_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCacheConfig_2 extends _i1.SmartFake implements _i2.CacheConfig {
  _FakeCacheConfig_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ICacheStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockICacheStorage extends _i1.Mock implements _i2.ICacheStorage {
  MockICacheStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> store(
    String? key,
    _i2.CacheEntry? entry,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entry,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.CacheEntry?> retrieve(String? key) => (super.noSuchMethod(
        Invocation.method(
          #retrieve,
          [key],
        ),
        returnValue: _i3.Future<_i2.CacheEntry?>.value(),
      ) as _i3.Future<_i2.CacheEntry?>);

  @override
  _i3.Future<bool> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<int> deleteBatch(Iterable<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteBatch,
          [keys],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> deleteByPattern(String? pattern) => (super.noSuchMethod(
        Invocation.method(
          #deleteByPattern,
          [pattern],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<String>> getAllKeys() => (super.noSuchMethod(
        Invocation.method(
          #getAllKeys,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<_i2.StorageStatistics> getStorageStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStorageStatistics,
          [],
        ),
        returnValue:
            _i3.Future<_i2.StorageStatistics>.value(_FakeStorageStatistics_0(
          this,
          Invocation.method(
            #getStorageStatistics,
            [],
          ),
        )),
      ) as _i3.Future<_i2.StorageStatistics>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ICacheStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockICacheStrategy extends _i1.Mock implements _i2.ICacheStrategy {
  MockICacheStrategy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get strategyName => (super.noSuchMethod(
        Invocation.getter(#strategyName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#strategyName),
        ),
      ) as String);

  @override
  DateTime calculateExpiry(
    String? key,
    dynamic data,
    _i2.CacheConfig? config,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateExpiry,
          [
            key,
            data,
            config,
          ],
        ),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.method(
            #calculateExpiry,
            [
              key,
              data,
              config,
            ],
          ),
        ),
      ) as DateTime);

  @override
  double calculatePriority(
    String? key,
    dynamic data,
    _i2.CacheMetadata? metadata,
    int? accessCount,
    DateTime? lastAccess,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculatePriority,
          [
            key,
            data,
            metadata,
            accessCount,
            lastAccess,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  bool shouldEvict(
    String? key,
    dynamic data,
    _i2.CacheConfig? config,
    double? memoryPressure,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldEvict,
          [
            key,
            data,
            config,
            memoryPressure,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [CacheConfigManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheConfigManager extends _i1.Mock
    implements _i5.CacheConfigManager {
  MockCacheConfigManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CacheConfig getConfig(String? configName) => (super.noSuchMethod(
        Invocation.method(
          #getConfig,
          [configName],
        ),
        returnValue: _FakeCacheConfig_2(
          this,
          Invocation.method(
            #getConfig,
            [configName],
          ),
        ),
      ) as _i2.CacheConfig);

  @override
  void setRuntimeOverride(
    String? configName,
    _i2.CacheConfig? config,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setRuntimeOverride,
          [
            configName,
            config,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeRuntimeOverride(String? configName) => super.noSuchMethod(
        Invocation.method(
          #removeRuntimeOverride,
          [configName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.CacheConfig createCustomConfig({
    Duration? ttl,
    Duration? maxIdleTime,
    int? maxSize,
    int? priority,
    bool? compressible,
    bool? persistent,
    Set<String>? tags,
    String? strategyName,
    Map<String, dynamic>? extensions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCustomConfig,
          [],
          {
            #ttl: ttl,
            #maxIdleTime: maxIdleTime,
            #maxSize: maxSize,
            #priority: priority,
            #compressible: compressible,
            #persistent: persistent,
            #tags: tags,
            #strategyName: strategyName,
            #extensions: extensions,
          },
        ),
        returnValue: _FakeCacheConfig_2(
          this,
          Invocation.method(
            #createCustomConfig,
            [],
            {
              #ttl: ttl,
              #maxIdleTime: maxIdleTime,
              #maxSize: maxSize,
              #priority: priority,
              #compressible: compressible,
              #persistent: persistent,
              #tags: tags,
              #strategyName: strategyName,
              #extensions: extensions,
            },
          ),
        ),
      ) as _i2.CacheConfig);

  @override
  _i2.CacheConfig createConfigForDataType(
    _i5.CacheDataType? dataType, {
    Duration? customTtl,
    int? customPriority,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConfigForDataType,
          [dataType],
          {
            #customTtl: customTtl,
            #customPriority: customPriority,
          },
        ),
        returnValue: _FakeCacheConfig_2(
          this,
          Invocation.method(
            #createConfigForDataType,
            [dataType],
            {
              #customTtl: customTtl,
              #customPriority: customPriority,
            },
          ),
        ),
      ) as _i2.CacheConfig);

  @override
  String getRecommendedConfig(
    String? key,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendedConfig,
          [
            key,
            data,
          ],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getRecommendedConfig,
            [
              key,
              data,
            ],
          ),
        ),
      ) as String);

  @override
  List<String> getAvailableConfigs() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableConfigs,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  Map<String, dynamic> getConfigStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getConfigStatistics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> exportConfigs() => (super.noSuchMethod(
        Invocation.method(
          #exportConfigs,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void importConfigs(Map<String, dynamic>? data) => super.noSuchMethod(
        Invocation.method(
          #importConfigs,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetRuntimeOverrides() => super.noSuchMethod(
        Invocation.method(
          #resetRuntimeOverrides,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
