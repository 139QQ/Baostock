// Mocks generated by Mockito 5.4.4 from annotations
// in jisu_fund_analyzer/test/unit/core/cache/dependency_injection_unification_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:jisu_fund_analyzer/src/core/cache/interfaces/cache_service.dart'
    as _i4;
import 'package:jisu_fund_analyzer/src/core/cache/unified_hive_cache_manager.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UnifiedHiveCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnifiedHiveCacheManager extends _i1.Mock
    implements _i2.UnifiedHiveCacheManager {
  MockUnifiedHiveCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
      ) as int);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize({
    _i2.CacheStrategy? strategy = _i2.CacheStrategy.hybrid,
    Duration? timeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {
            #strategy: strategy,
            #timeout: timeout,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> put<T>(
    String? key,
    T? value, {
    Duration? expiration,
    _i2.CachePriority? priority = _i2.CachePriority.normal,
    bool? enableIndexing = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
          {
            #expiration: expiration,
            #priority: priority,
            #enableIndexing: enableIndexing,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> putAll<T>(
    Map<String, T>? items, {
    Duration? expiration,
    _i2.CachePriority? priority = _i2.CachePriority.normal,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [items],
          {
            #expiration: expiration,
            #priority: priority,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  T? get<T>(
    String? key, {
    bool? updateStats = true,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #get,
        [key],
        {#updateStats: updateStats},
      )) as T?);

  @override
  Map<String, T?> getAll<T>(List<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [keys],
        ),
        returnValue: <String, T?>{},
      ) as Map<String, T?>);

  @override
  List<String> search(
    String? query, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
          {#limit: limit},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i3.Future<void> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  Map<String, dynamic> getStats() => (super.noSuchMethod(
        Invocation.method(
          #getStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i4.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<T?> get<T>(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);

  @override
  _i3.Future<void> put<T>(
    String? key,
    T? value, {
    Duration? expiration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
          {#expiration: expiration},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<String>> getAllKeys() => (super.noSuchMethod(
        Invocation.method(
          #getAllKeys,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<Map<String, dynamic>> getStats() => (super.noSuchMethod(
        Invocation.method(
          #getStats,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> getAll(List<String>? keys) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [keys],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> putAll(
    Map<String, dynamic>? keyValuePairs, {
    Duration? expiration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [keyValuePairs],
          {#expiration: expiration},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeAll(List<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [keys],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setExpiration(
    String? key,
    Duration? expiration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setExpiration,
          [
            key,
            expiration,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Duration?> getExpiration(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getExpiration,
          [key],
        ),
        returnValue: _i3.Future<Duration?>.value(),
      ) as _i3.Future<Duration?>);
}
