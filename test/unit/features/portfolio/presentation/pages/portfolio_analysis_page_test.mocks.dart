// Mocks generated by Mockito 5.4.4 from annotations
// in jisu_fund_analyzer/test/unit/features/portfolio/presentation/pages/portfolio_analysis_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:jisu_fund_analyzer/src/features/portfolio/domain/entities/portfolio_holding.dart'
    as _i8;
import 'package:jisu_fund_analyzer/src/features/portfolio/domain/entities/portfolio_profit_calculation_criteria.dart'
    as _i9;
import 'package:jisu_fund_analyzer/src/features/portfolio/domain/entities/portfolio_profit_metrics.dart'
    as _i6;
import 'package:jisu_fund_analyzer/src/features/portfolio/domain/fund_favorite/src/entities/fund_favorite.dart'
    as _i11;
import 'package:jisu_fund_analyzer/src/features/portfolio/domain/fund_favorite/src/entities/fund_favorite_list.dart'
    as _i12;
import 'package:jisu_fund_analyzer/src/features/portfolio/presentation/cubit/fund_favorite_cubit.dart'
    as _i3;
import 'package:jisu_fund_analyzer/src/features/portfolio/presentation/cubit/portfolio_analysis_cubit.dart'
    as _i4;
import 'package:jisu_fund_analyzer/src/features/portfolio/presentation/cubit/portfolio_analysis_state.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePortfolioAnalysisState_0 extends _i1.SmartFake
    implements _i2.PortfolioAnalysisState {
  _FakePortfolioAnalysisState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFundFavoriteState_1 extends _i1.SmartFake
    implements _i3.FundFavoriteState {
  _FakeFundFavoriteState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PortfolioAnalysisCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPortfolioAnalysisCubit extends _i1.Mock
    implements _i4.PortfolioAnalysisCubit {
  MockPortfolioAnalysisCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get currentStateDescription => (super.noSuchMethod(
        Invocation.getter(#currentStateDescription),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#currentStateDescription),
        ),
      ) as String);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  bool get isCalculating => (super.noSuchMethod(
        Invocation.getter(#isCalculating),
        returnValue: false,
      ) as bool);

  @override
  int get holdingsCount => (super.noSuchMethod(
        Invocation.getter(#holdingsCount),
        returnValue: 0,
      ) as int);

  @override
  Map<String, _i6.PortfolioProfitMetrics> get currentMetrics =>
      (super.noSuchMethod(
        Invocation.getter(#currentMetrics),
        returnValue: <String, _i6.PortfolioProfitMetrics>{},
      ) as Map<String, _i6.PortfolioProfitMetrics>);

  @override
  _i2.PortfolioAnalysisState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePortfolioAnalysisState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.PortfolioAnalysisState);

  @override
  _i7.Stream<_i2.PortfolioAnalysisState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i2.PortfolioAnalysisState>.empty(),
      ) as _i7.Stream<_i2.PortfolioAnalysisState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> initializeAnalysis({
    String? userId,
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeAnalysis,
          [],
          {
            #userId: userId,
            #force: force,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> calculatePortfolioSummary({
    List<_i8.PortfolioHolding>? holdings,
    _i9.PortfolioProfitCalculationCriteria? criteria,
    String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculatePortfolioSummary,
          [],
          {
            #holdings: holdings,
            #criteria: criteria,
            #userId: userId,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> calculateFundMetrics({
    required _i8.PortfolioHolding? holding,
    _i9.PortfolioProfitCalculationCriteria? criteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateFundMetrics,
          [],
          {
            #holding: holding,
            #criteria: criteria,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateCalculationCriteria(
          _i9.PortfolioProfitCalculationCriteria? criteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCalculationCriteria,
          [criteria],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateTimePeriod({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTimePeriod,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateBenchmark(String? benchmarkCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBenchmark,
          [benchmarkCode],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> refreshData() => (super.noSuchMethod(
        Invocation.method(
          #refreshData,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<bool> addHolding({
    required String? userId,
    required _i8.PortfolioHolding? holding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addHolding,
          [],
          {
            #userId: userId,
            #holding: holding,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> updateHolding({
    required String? userId,
    required _i8.PortfolioHolding? holding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHolding,
          [],
          {
            #userId: userId,
            #holding: holding,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> deleteHolding({
    required String? userId,
    required String? fundCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteHolding,
          [],
          {
            #userId: userId,
            #fundCode: fundCode,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<int> getHoldingsCount(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getHoldingsCount,
          [userId],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<bool> clearAllHoldings(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #clearAllHoldings,
          [userId],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> importHoldings({
    required String? userId,
    required List<_i8.PortfolioHolding>? holdings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #importHoldings,
          [],
          {
            #userId: userId,
            #holdings: holdings,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> addDefaultUserHolding(_i8.PortfolioHolding? holding) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDefaultUserHolding,
          [holding],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> updateDefaultUserHolding(_i8.PortfolioHolding? holding) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDefaultUserHolding,
          [holding],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> deleteDefaultUserHolding(String? fundCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDefaultUserHolding,
          [fundCode],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<int> getDefaultUserHoldingsCount() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultUserHoldingsCount,
          [],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<bool> clearDefaultUserHoldings() => (super.noSuchMethod(
        Invocation.method(
          #clearDefaultUserHoldings,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> importDefaultUserHoldings(
          List<_i8.PortfolioHolding>? holdings) =>
      (super.noSuchMethod(
        Invocation.method(
          #importDefaultUserHoldings,
          [holdings],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  void emit(_i2.PortfolioAnalysisState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i10.Change<_i2.PortfolioAnalysisState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [FundFavoriteCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFundFavoriteCubit extends _i1.Mock implements _i3.FundFavoriteCubit {
  MockFundFavoriteCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FundFavoriteState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeFundFavoriteState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.FundFavoriteState);

  @override
  _i7.Stream<_i3.FundFavoriteState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i3.FundFavoriteState>.empty(),
      ) as _i7.Stream<_i3.FundFavoriteState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> loadAllFavorites() => (super.noSuchMethod(
        Invocation.method(
          #loadAllFavorites,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> getFavoriteByCode(String? fundCode) => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteByCode,
          [fundCode],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addFavorite(_i11.FundFavorite? favorite) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [favorite],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateFavorite(_i11.FundFavorite? favorite) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFavorite,
          [favorite],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeFavorite(String? fundCode) => (super.noSuchMethod(
        Invocation.method(
          #removeFavorite,
          [fundCode],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeMultipleFavorites(List<String>? fundCodes) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMultipleFavorites,
          [fundCodes],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> searchFavorites(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchFavorites,
          [query],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> sortFavorites(
    _i11.FundFavoriteSortType? sortType,
    _i11.FundFavoriteSortDirection? direction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sortFavorites,
          [
            sortType,
            direction,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateMarketData(
    String? fundCode, {
    double? currentNav,
    double? dailyChange,
    double? previousNav,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMarketData,
          [fundCode],
          {
            #currentNav: currentNav,
            #dailyChange: dailyChange,
            #previousNav: previousNav,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> checkIsFavorite(String? fundCode) => (super.noSuchMethod(
        Invocation.method(
          #checkIsFavorite,
          [fundCode],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> toggleFavorite(_i11.FundFavorite? favorite) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [favorite],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearAllFavorites() => (super.noSuchMethod(
        Invocation.method(
          #clearAllFavorites,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> loadFavoriteLists() => (super.noSuchMethod(
        Invocation.method(
          #loadFavoriteLists,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> createFavoriteList(_i12.FundFavoriteList? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFavoriteList,
          [list],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateFavoriteList(_i12.FundFavoriteList? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFavoriteList,
          [list],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteFavoriteList(String? listId) => (super.noSuchMethod(
        Invocation.method(
          #deleteFavoriteList,
          [listId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void clearMessage() => super.noSuchMethod(
        Invocation.method(
          #clearMessage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void emit(_i3.FundFavoriteState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i10.Change<_i3.FundFavoriteState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
