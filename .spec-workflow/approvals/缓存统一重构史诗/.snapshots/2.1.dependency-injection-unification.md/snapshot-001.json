{
  "id": "snapshot_1761653527873_ndyrmq5d4",
  "approvalId": "approval_1761653527867_2zror0ave",
  "approvalTitle": "故事2.1：依赖注入容器统一和缓存服务集成 - 开发批准",
  "version": 1,
  "timestamp": "2025-10-28T12:12:07.873Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Story 2.1: 依赖注入容器统一和缓存服务集成\r\n\r\n## Status\r\nDraft\r\n\r\n## Story\r\n**作为** 系统架构师，\r\n**我想要** 将UnifiedHiveCacheManager注册为统一缓存服务并移除重复缓存管理器的依赖注入注册，\r\n**以便** 消除缓存架构混乱，降低内存占用，提升代码可维护性\r\n\r\n## Acceptance Criteria\r\n1. 将UnifiedHiveCacheManager注册为默认缓存服务接口\r\n2. 移除7个重复缓存管理器的依赖注入注册（HiveCacheManager、EnhancedHiveCacheManager、OptimizedCacheManagerV3等）\r\n3. 更新所有模块的缓存引用，使其使用统一缓存服务\r\n4. 保持所有现有API接口向后兼容\r\n5. 确保所有现有功能通过测试，无功能回归\r\n6. 实现配置开关，支持新旧缓存系统快速切换\r\n\r\n## Tasks / Subtasks\r\n- [ ] Task 1: 分析现有依赖注入容器中的缓存服务注册 (AC: 1, 2)\r\n  - [ ] Subtask 1.1: 识别所有重复的缓存管理器注册\r\n  - [ ] Subtask 1.2: 分析各模块对缓存服务的依赖关系\r\n  - [ ] Subtask 1.3: 创建迁移计划，确保向后兼容\r\n- [ ] Task 2: 设计统一缓存服务接口和适配器 (AC: 1, 4)\r\n  - [ ] Subtask 2.1: 创建统一缓存服务抽象接口\r\n  - [ ] Subtask 2.2: 实现现有缓存接口的适配器层\r\n  - [ ] Subtask 2.3: 确保API兼容性，不破坏现有调用\r\n- [ ] Task 3: 重构依赖注入容器 (AC: 1, 2)\r\n  - [ ] Subtask 3.1: 注册UnifiedHiveCacheManager为主要缓存服务\r\n  - [ ] Subtask 3.2: 移除重复缓存管理器的注册\r\n  - [ ] Subtask 3.3: 添加配置开关支持新旧系统切换\r\n- [ ] Task 4: 更新各模块的缓存引用 (AC: 3, 4)\r\n  - [ ] Subtask 4.1: 更新FundDataService缓存引用\r\n  - [ ] Subtask 4.2: 更新DataValidationService缓存引用\r\n  - [ ] Subtask 4.3: 更新FundComparisonService缓存引用\r\n  - [ ] Subtask 4.4: 更新PortfolioProfitCacheService缓存引用\r\n- [ ] Task 5: 实现向后兼容测试 (AC: 4, 5)\r\n  - [ ] Subtask 5.1: 编写缓存接口兼容性测试\r\n  - [ ] Subtask 5.2: 验证所有现有功能正常工作\r\n  - [ ] Subtask 5.3: 测试新旧缓存系统切换功能\r\n  - [ ] Subtask 5.4: 性能回归测试，确保无性能退化\r\n\r\n## Dev Notes\r\n\r\n### 技术架构上下文\r\n**现有缓存架构问题**: [Source: architecture/cache-architecture-guide.md#31-关键问题：重复缓存实现]\r\n- 项目中存在7个重复的缓存管理器实现\r\n- 代码重复率70-80%，维护成本高\r\n- 内存占用增加，存在缓存一致性问题\r\n- 性能资源浪费，缓存命中率65-75%\r\n\r\n**现有缓存管理器列表**:\r\n```dart\r\n// 需要统一移除的重复实现：\r\nlib/src/core/cache/hive_cache_manager.dart              // 基础版本\r\nlib/src/core/cache/enhanced_hive_cache_manager.dart      // 增强版本\r\nlib/src/core/cache/optimized_cache_manager.dart          // 优化版本\r\nlib/src/services/optimized_cache_manager_v3.dart          // 服务层版本\r\nlib/src/services/intelligent_cache_manager.dart           // 智能版本\r\nlib/src/services/fund_data_cache_service.dart            // 基金数据服务\r\nlib/src/services/smart_preloading_manager.dart           // 智能预加载\r\n```\r\n\r\n**统一缓存管理器**: [Source: architecture/cache-architecture-guide.md#41-核心架构：unifiedhivecachemanager]\r\n- 文件位置: `lib/src/core/cache/unified_hive_cache_manager.dart`\r\n- 支持三层缓存架构: L1(内存) + L2(磁盘) + L3(网络)\r\n- 智能调度，优先级驱动的缓存策略\r\n- 完整的容错机制和性能监控\r\n\r\n### 现有依赖注入分析\r\n**当前依赖注入文件**: `lib/src/core/di/injection_container.dart`\r\n- 第62-82行: 注册了3个重复的缓存管理器\r\n- 第131-138行: FundDataService使用缓存管理器\r\n- 第163行: FundComparisonRepository使用缓存管理器\r\n- 第252-259行: PortfolioProfitCacheService独立实现缓存\r\n\r\n**重复注册问题**:\r\n```dart\r\n// 第62-72行: 基础缓存管理器\r\nsl.registerLazySingleton<HiveCacheManager>(() => HiveCacheManager.instance);\r\n\r\n// 第64-72行: 增强版缓存管理器\r\nsl.registerLazySingleton<EnhancedHiveCacheManager>(() =>\r\n  EnhancedHiveCacheManager.instance);\r\n\r\n// 第74-82行: 优化版缓存管理器V3\r\nsl.registerLazySingleton<OptimizedCacheManagerV3>(() =>\r\n  OptimizedCacheManagerV3.createNewInstance());\r\n```\r\n\r\n### 缓存服务使用分析\r\n**FundDataService** (`lib/src/features/fund/shared/services/fund_data_service.dart`):\r\n- 当前使用基础缓存管理器\r\n- 需要更新为使用统一缓存接口\r\n\r\n**DataValidationService** (`lib/src/features/fund/shared/services/data_validation_service.dart`):\r\n- 当前使用缓存管理器进行数据验证\r\n- 需要保持验证逻辑不变，更新缓存接口\r\n\r\n**FundComparisonRepository** (`lib/src/features/fund/data/repositories/fund_comparison_repository_impl.dart`):\r\n- 使用缓存管理器存储基金对比数据\r\n- 需要确保对比数据迁移无缝\r\n\r\n**PortfolioProfitCacheService** (`lib/src/features/portfolio/data/services/portfolio_profit_cache_service.dart`):\r\n- 独立实现缓存逻辑\r\n- 需要整合到统一缓存架构中\r\n\r\n### 统一接口设计\r\n**缓存服务抽象接口**:\r\n```dart\r\nabstract class CacheService {\r\n  Future<T?> get<T>(String key);\r\n  Future<void> put<T>(String key, T value, {Duration? expiration});\r\n  Future<void> remove(String key);\r\n  Future<void> clear();\r\n  Future<bool> containsKey(String key);\r\n  Future<List<String>> getAllKeys();\r\n  Future<Map<String, dynamic>> getStats();\r\n}\r\n```\r\n\r\n**适配器模式实现**:\r\n```dart\r\nclass UnifiedCacheServiceAdapter implements CacheService {\r\n  final UnifiedHiveCacheManager _manager;\r\n\r\n  UnifiedCacheServiceAdapter(this._manager);\r\n\r\n  @override\r\n  Future<T?> get<T>(String key) async {\r\n    return await _manager.get(key);\r\n  }\r\n\r\n  // 实现其他接口方法...\r\n}\r\n```\r\n\r\n### 缓存键标准化\r\n**新命名规范**: [Source: architecture/cache-architecture-guide.md#511-缓存键命名规范]\r\n```dart\r\n// 推荐格式：module:type:identifier\r\n'fund:detail:161725'\r\n'fund:ranking:all'\r\n'user:preferences:theme'\r\n'search:results:tech_funds'\r\n'portfolio:profit:calculation'\r\n```\r\n\r\n**现有键名迁移**:\r\n- `'fund_${fundCode}'` → `'fund:detail:${fundCode}'`\r\n- `'ranking_data'` → `'fund:ranking:all'`\r\n- `'user_settings'` → `'user:preferences:all'`\r\n\r\n### 配置开关设计\r\n**新旧系统切换机制**:\r\n```dart\r\nclass CacheSystemConfig {\r\n  static bool useUnifiedCache = true; // 默认使用新系统\r\n\r\n  static CacheService getCacheService() {\r\n    if (useUnifiedCache) {\r\n      return UnifiedCacheServiceAdapter(sl<UnifiedHiveCacheManager>());\r\n    } else {\r\n      return LegacyCacheServiceAdapter(sl<HiveCacheManager>());\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### 风险缓解措施\r\n**数据备份策略**:\r\n- 在迁移前备份现有缓存数据\r\n- 实现自动数据迁移工具\r\n- 提供手动数据恢复机制\r\n\r\n**渐进式迁移**:\r\n- 先更新依赖注入，保持接口兼容\r\n- 逐步更新各模块缓存引用\r\n- 每步验证功能完整性\r\n\r\n**回滚机制**:\r\n- 配置开关支持快速回滚到旧系统\r\n- 保留原有缓存实现作为备份\r\n- 实现详细监控和异常告警\r\n\r\n### 文件修改清单\r\n**需要修改的文件**:\r\n1. `lib/src/core/di/injection_container.dart` - 主要修改目标\r\n2. `lib/src/features/fund/shared/services/fund_data_service.dart` - 更新缓存引用\r\n3. `lib/src/features/fund/shared/services/data_validation_service.dart` - 更新缓存引用\r\n4. `lib/src/features/fund/data/repositories/fund_comparison_repository_impl.dart` - 更新缓存引用\r\n5. `lib/src/features/portfolio/data/services/portfolio_profit_cache_service.dart` - 整合缓存逻辑\r\n\r\n**需要创建的文件**:\r\n1. `lib/src/core/cache/interfaces/cache_service.dart` - 统一缓存接口\r\n2. `lib/src/core/cache/adapters/unified_cache_adapter.dart` - 统一缓存适配器\r\n3. `lib/src/core/cache/adapters/legacy_cache_adapter.dart` - 兼容性适配器\r\n4. `lib/src/core/config/cache_system_config.dart` - 配置开关\r\n\r\n### Testing\r\n**测试文件位置**:\r\n- 单元测试: `test/unit/core/cache/dependency_injection_unification_test.dart`\r\n- 集成测试: `test/integration/core/cache/unified_cache_integration_test.dart`\r\n- 兼容性测试: `test/integration/core/cache/backward_compatibility_test.dart`\r\n- 性能测试: `test/performance/core/cache/cache_performance_test.dart`\r\n\r\n**关键测试场景**:\r\n1. 依赖注入容器正确注册统一缓存服务\r\n2. 所有现有缓存调用正常工作\r\n3. 新旧缓存系统切换功能正常\r\n4. 缓存数据迁移无丢失\r\n5. 性能指标无明显退化\r\n\r\n### 成功标准验证\r\n**可量化指标**:\r\n- 依赖注入容器中的缓存注册数量从3个减少到1个\r\n- 所有现有功能测试通过率100%\r\n- 新旧系统切换测试通过率100%\r\n- 性能回归测试通过，响应时间变化<5%\r\n\r\n**质量标准**:\r\n- 代码重复率从70-80%降低到10%以下\r\n- 编译无警告，无错误\r\n- 所有import语句正确更新\r\n- 文档和注释完整更新\r\n\r\n## Change Log\r\n| Date | Version | Description | Author |\r\n|------|---------|-------------|--------|\r\n| 2025-10-28 | 1.0 | 初始故事创建 | Scrum Master |\r\n\r\n## Dev Agent Record\r\n\r\n### Agent Model Used\r\n[待开发代理填写]\r\n\r\n### Debug Log References\r\n[待开发代理填写]\r\n\r\n### Completion Notes List\r\n[待开发代理填写]\r\n\r\n### File List\r\n[待开发代理填写]\r\n\r\n## QA Results\r\n[待QA代理填写]",
  "fileStats": {
    "size": 9423,
    "lines": 247,
    "lastModified": "2025-10-28T12:09:22.608Z"
  },
  "comments": []
}